import hre, { deployments, ethers } from "hardhat";
import { Wallet, Contract, BytesLike, Signer } from "ethers";
import {EntryPoint__factory,} from "../../typechain";
import {SignerWithAddress} from '@nomiclabs/hardhat-ethers/signers';
const solc = require("solc");

export const getEntryPoint = async () => {
	const EntryPointDeployment = await deployments.get('EntryPoint');
	const EntryPoint = await hre.ethers.getContractFactory('EntryPoint');
	// return EntryPoint__factory.connect('0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789', ethers.provider.getSigner());
	return EntryPoint__factory.connect(EntryPointDeployment.address, ethers.provider.getSigner());
};

export const getSmartAccountImplementation = async () => {
  const SmartAccountImplDeployment = await deployments.get("SmartAccount");
  const SmartAccountImpl = await hre.ethers.getContractFactory("SmartAccount");
  return SmartAccountImpl.attach(SmartAccountImplDeployment.address);
};

export const getSmartAccountFactory = async () => {
  const SAFactoryDeployment = await deployments.get("SmartAccountFactory");
  const SmartAccountFactory = await hre.ethers.getContractFactory("SmartAccountFactory");
  return SmartAccountFactory.attach(SAFactoryDeployment.address);
};

export const getMockToken = async () => {
  const MockTokenDeployment = await deployments.get("MockToken");
  const MockToken = await hre.ethers.getContractFactory("MockToken");
  return MockToken.attach(MockTokenDeployment.address);
};

export const getMockVVASessionKeyData = async () => {
	return {
		sessionKeyMockup: '',
		groupId: '0xf6e75e0d77de22937296d606c69ba6a4',
		sismoConnectResponse: '0x0000000000000000000000000000000000000000000000000000000000000020a5ccb95f10e63bd84cef8f0a5556652c00000000000000000000000000000000b8e2054f8a912367e38a22ce773328ff000000000000000000000000000000007369736d6f2d636f6e6e6563742d76312e31000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000012566f756c657a2d566f75732061757468203f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001a068796472612d73332e310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000004a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000b256349e861b5f942e3d9e675cfda632758c798a00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c024b2226fe7f810ae573fc8120a8db84413350ee57933356061e0549bdb944d7f2fd4842c83d9057559e97ce5a702211fe81095326e1edd6a48edc241e64ad314024345e0821a9521e3b05b797f0b9eb35eb42df5015de97b4d36e0945facad0e0a46b46239d1f029b961fe420abc91a716399dcfa65fbba74c15c3dc1f74c04709841e206869e32d1c4176e7665804554df17af59b1d4a292a3e2d3136d9984b0263b26dfff74e60f0e7a185c0ff66e4d93b7bbc2e7eadc80ebc7b0edc0bc4c42d0fc49fd086f330f7609c5b2a832a17e1fa34706d4d03c7c7bef8a74c15b0e71c030fd44b2afc326c7e58653d96b8a93c8a957b8213379bf2b672597b381f7b000000000000000000000000b256349e861b5f942e3d9e675cfda632758c798a040a6358bf5422142184091544892c5b46ff4ccbff28aa2618364fcb056968b51801b584700a740f9576cc7e83745895452edc518a9ce60b430e1272fc4eb93b057cf80de4f8dd3e4c56f948f40c28c3acbeca71ef9f825597bf8cc059f1238b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000274b221fbdf92faa7f50e60b0b36454b875890cf9a5d43fb7e43a0df473e4a46191103b6f90b4a5485ce814a70fcbdd402aa703966c13153f58bd8de676e62d400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c068796472612d73332e310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000004c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000094f87441c59d26da959a72b49f19c794000000000000000000000000000000006c617465737400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c003cb03d2b6d8539199d438eb497a8f8aded36d879df9f1b622c7cc6d6ad028e911d351d336de2421649199c64de5954b42881ee6c40d23cda763a51ae95a61cc1523b5e03d2e306c661bcda3680c20bdb9c9127a627392cade199ecd1738fd370c52c4f76bd5fa3587996a3fa35c98ba5776a85e0a5cd5bfa9772ff2158080f605d6617fc1ce1d8ff7835da222d486ab043295a6866726ccec92318578927d0c175f2f58efe6834e9a971dd86cee20b5305a194e4f4bae2e8f48b71b14942382083ee0bc14848babc7049f7e0a5fe635d55c2c1090a408183d664087e204eb6627e02a497ea1d505ccab0af7a78d160b47e98d75958529e8e20c5c23511269770000000000000000000000000000000000000000000000000000000000000000040a6358bf5422142184091544892c5b46ff4ccbff28aa2618364fcb056968b51801b584700a740f9576cc7e83745895452edc518a9ce60b430e1272fc4eb93b057cf80de4f8dd3e4c56f948f40c28c3acbeca71ef9f825597bf8cc059f1238b1037de674a7fa938b3844f6d5330e29f79f1f789b65229342f90b3cab57de4ff2608a2b4bb9b4afdda1ac125319b1360726c38f31c5eab3237678cca790a6ad62d811541da7857518db5fd39b90c8b1459b0d8a896d408be73e1778e38acd8e9000000000000000000000000000000000000000000000000000000000000000103cb88e92208465d6ca9a1911a95be7cf3c5bb8c0647ae4c345a1f442ffffffd0000000000000000000000000000000000000000000000000000000000000000274b221fbdf92faa7f50e60b0b36454b875890cf9a5d43fb7e43a0df473e4a46191103b6f90b4a5485ce814a70fcbdd402aa703966c13153f58bd8de676e62d4000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
	};
};

export const getEcdsaOwnershipRegistryModule = async () => {
  const EcdsaOwnershipRegistryModuleDeployment = await deployments.get("EcdsaOwnershipRegistryModule");
  const EcdsaOwnershipRegistryModule = await hre.ethers.getContractFactory("EcdsaOwnershipRegistryModule");
  return EcdsaOwnershipRegistryModule.attach(EcdsaOwnershipRegistryModuleDeployment.address);
};

export const getSmartContractOwnershipRegistryModule = async() => {
  const SmartContractOwnerhsipRegistryDeployment = await deployments.get("SmartContractOwnershipRegistryModule");
  const SmartContractOwnerhsipRegistryModule = await hre.ethers.getContractFactory("SmartContractOwnershipRegistryModule");
  return SmartContractOwnerhsipRegistryModule.attach(SmartContractOwnerhsipRegistryDeployment.address);
}

export const getVerifyingPaymaster = async (
  owner: SignerWithAddress,
  verifiedSigner: SignerWithAddress,
) => {
  const entryPoint = await getEntryPoint();
  const VerifyingSingletonPaymaster = await hre.ethers.getContractFactory("VerifyingSingletonPaymaster");
  const verifyingSingletonPaymaster = await VerifyingSingletonPaymaster.deploy(owner.address, entryPoint.address, verifiedSigner.address);
  
  await verifyingSingletonPaymaster
    .connect(owner)
    .addStake(10, { value: ethers.utils.parseEther("2") });

  await verifyingSingletonPaymaster.depositFor(
    verifiedSigner.address,
    { value: ethers.utils.parseEther("1") }
  );

  await entryPoint.depositTo(
    verifyingSingletonPaymaster.address, 
    { value: ethers.utils.parseEther("10") }
  );  

  return verifyingSingletonPaymaster;
};

export const getSmartAccountWithModule = async (
  moduleSetupContract: string,
  moduleSetupData: BytesLike,
  index: number,
) => {
  const factory = await getSmartAccountFactory();
  const expectedSmartAccountAddress =
        await factory.getAddressForCounterFactualAccount(moduleSetupContract, moduleSetupData, index);
  await factory.deployCounterFactualAccount(moduleSetupContract, moduleSetupData, index);
  return await hre.ethers.getContractAt("SmartAccount", expectedSmartAccountAddress);
}


export const compile = async (source: string) => {
  const input = JSON.stringify({
    language: "Solidity",
    settings: {
      outputSelection: {
        "*": {
          "*": ["abi", "evm.bytecode"],
        },
      },
    },
    sources: {
      "tmp.sol": {
        content: source,
      },
    },
  });
  const solcData = await solc.compile(input);
  const output = JSON.parse(solcData);
  if (!output.contracts) {
    console.log(output);
    throw Error("Could not compile contract");
  }
  const fileOutput = output.contracts["tmp.sol"];
  const contractOutput = fileOutput[Object.keys(fileOutput)[0]];
  const abi = contractOutput.abi;
  const data = "0x" + contractOutput.evm.bytecode.object;
  return {
    data: data,
    interface: abi,
  };
};

export const deployContract = async (
  deployer: Wallet,
  source: string
): Promise<Contract> => {
  const output = await compile(source);
  const transaction = await deployer.sendTransaction({
    data: output.data,
    gasLimit: 6000000,
  });
  const receipt = await transaction.wait();
  return new Contract(receipt.contractAddress, output.interface, deployer);
};
